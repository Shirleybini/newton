{
	"indentation_key1": "# What is `Indentation` ?\n\n\n",
	"indentation_key2": "Please have a look at the `code` given below. Now think about the `output` of this `code` without running.\n",
	"indentation_key3": "What answer did you thought ? Please copy paste this `code` , `save` this in a `file` and run this `code` .You will notice that  this `code` will not print any `output` ,but gives `error` .To  understand about this `error` we need  to think from the point of view of `python` . `Python` will run this program as follows:-\n",
	"indentation_key4": "In the first line it will put the value 10 in \"a\" .\n",
	"indentation_key5": "In the second line `python` will check that whether multiplying **a** by 2 gives  result equal to 20 or not.\n",
	"indentation_key6": "Till the third line  `python` will be able to know that on multiplying **a** 2 by we will definitely get 20.But `python` gets confused at this place ,it does not understands that whether it should only print  \"`Variable` a when multiplied by 2 gives 20.\" or it needs to run the `code` given below also or not . Humans can easily understand this , but the computer gets mad and gives `error`.\n\n\n",
	"indentation_key7": "We will write this program correctly as follows,\n",
	"indentation_key8": "When  `python` will run this correct `code` , then its brain will work like this. \n",
	"indentation_key9": "In the first line it will put the value 10 in \"a\" .\n",
	"indentation_key10": "In the second line `python` will check that whether multiplying **a** by 2 gives  result equal to 20 or not.\n",
	"indentation_key11": "In the third line ,`python` will print \"`Variable` a when multiplied by 2 gives 20.\"Now you will think that  `python` prints this line in this `code` then why it did not print in the  previous example .But , see a little carefully that the third line has started after some space. These spaces are called indent in `python`.Now ,`python`  understands that  on multiplying  **a** by  2  we get 20 ,if this condition is `true` , then we will run the lines which are indented below **if**.\n",
	"indentation_key12": "In the 4th line  `python` finds else but it does not run else part because if part already ran. So, how to use if `statement` , try to  learn about this.\n\n\n",
	"indentation_key13": "This  spacing in `python` is called `indentation`. Whenever there is a problem related to `indentation` , `Python` call it as an  `Indentation` `Error` This `error` looks like this:\n",
	"indentation_key14": "# One more example\n\n\n",
	"indentation_key15": "We will take more example and to understand it clearly. First run the `code` given below. After that read the text given below.\n",
	"indentation_key16": "In this program, in the last  3 lines ` (‘print \"The counter is\" + str(counter)’, ‘counter = counter + 1’, ‘print \"--------\"’) ` if there is no `indentation` then `python` will not be able to understand that after while `loop` what it has to run?`Python` will get confused and will give an `error`. To indent a `python`  `code` is very important.If you see the program,you will realize that the `code` is divided into different parts:\n",
	"indentation_key17": "In the first part, `counter` `variable` is defined and we write the line `while counter < 10` .\n",
	"indentation_key18": "In the second part ,we have written that `code` which will run after for `loop` again and again till the for `loop` is running. \nThe different parts of `code` are called `code` blocks and  in `python` to indent these blocks we use `tab`. \nTo understand this , `save` the given `code` in a new `file` and see what `output` comes and how that `output` is different from the `output` of the `code` given above .After this discuss about what happened?\n\n",
	"indentation_key19": "**Note: Whenever you write the `code`, then your `editor` should indent the `code` ,but if it does not do that ,then you can use the `Tab` `key` for indenting.**\n",
	"indentation_key20": "**Note: You can also use  Space `key` for `indentation`. Space `key`  is difficult to use, as many `error` occur due to its use ,just because of this many `error` occur ,that is why many   Developers(Software Engineer) use `Tab` so that minor `errors` do not occur.**\n",
	"indentation_key21": "# Multiple Levels of `Indentation`\n\n\n",
	"indentation_key22": "In a given indented `code` block there can be  another indented `code` block. Study this `code` and understand and tell how the `output` come?Try to run this `code` and see if you thought correctly about the `output` or not.If not then use your brain to think about it more.\n",
	"indentation_key23": "Please see here that in this `code` , 2 levels of indented `code` blocks exist.  \n",
	"indentation_key24": "After the first level `if counter % 2 == 0’ is present.`\n",
	"indentation_key25": "In the second level `print (\"Counter is an even number.\")` is present.\n\n\n",
	"indentation_key26": "Here, `python` will run if under while `loop`  and`print (\"Counter is an even number.\")`only when inside the `loop` `counter`value  is an even number.\n"
}